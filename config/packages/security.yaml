security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        in_memory:
            memory:
                users:
                    admin:
                        password: $2y$12$pIKqp/Cf8fkRWegWlNgmxutspO0fUiPCkw0SdWjuVZQCceGhYI.TS
                        roles: 'ROLE_ADMIN'
        
    role_hierarchy:
        ROLE_ADMIN: [ROLE_API]

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true
            json_login:
                check_path: /login
                username_path: username
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            provider: in_memory
        api:
           pattern: ^/api/
           stateless: true
           anonymous: true
           provider: in_memory
           guard:
               authenticators:
                   - lexik_jwt_authentication.jwt_token_authenticator
          

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/api, roles: ROLE_API }
         - { path: ^/admin, roles: ROLE_ADMIN }
    encoders:
        Symfony\Component\Security\Core\User\User:
           algorithm: bcrypt
           cost: 12
       
